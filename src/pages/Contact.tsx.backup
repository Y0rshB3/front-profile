import React, { useState } from 'react';
import { Mail, Send } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_URL;

const Contact: React.FC = () => {
  const { t } = useTranslation();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState('');
  const [isError, setIsError] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitMessage('');
    setIsError(false);
    
    try {
      const response = await axios.post(, {
        name: formData.name,
        email: formData.email,
        subject: formData.subject || 'Mensaje desde el portfolio',
        message: formData.message
      });

      if (response.status === 200) {
        setSubmitMessage(t('contact.success'));
        setFormData({
          name: '',
          email: '',
          subject: '',
          message: ''
        });
        
        // Clear success message after 5 seconds
        setTimeout(() => {
          setSubmitMessage('');
        }, 5000);
      }
    } catch (error: any) {
      console.error('Error sending contact form:', error);
      setIsError(true);
      
      if (error.response?.data?.message) {
        setSubmitMessage();
      } else {
        setSubmitMessage(t('contact.error') || 'Error al enviar el mensaje. Por favor, intenta nuevamente.');
      }
      
      // Clear error message after 5 seconds
      setTimeout(() => {
        setSubmitMessage('');
        setIsError(false);
      }, 5000);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className=px-4>
      <div className=flex items-center gap-2 mb-6>
        <Mail size={28} className=text-gameboy-green-1 />
        <h1 className=text-2xl font-bold>{t('contact.title')}</h1>
      </div>

      <div className=gameboy-container mb-8>
        <div className=gameboy-screen>
          <p className=mb-6 pixel-text>
            {t('contact.intro')}
          </p>

          <form onSubmit={handleSubmit}>
            <div className=mb-4>
              <label htmlFor=name className=block mb-2 font-bold>
                {t('contact.name')} *
              </label>
              <input
                type=text
                id=name
                name=name
                value={formData.name}
                onChange={handleChange}
                required
                className=w-full p-2 bg-gameboy-green-4 border-2 border-gameboy-green-1
              />
            </div>

            <div className=mb-4>
              <label htmlFor=email className=block mb-2 font-bold>
                {t('contact.email')} *
              </label>
              <input
                type=email
                id=email
                name=email
                value={formData.email}
                onChange={handleChange}
                required
                className=w-full p-2 bg-gameboy-green-4 border-2 border-gameboy-green-1
              />
            </div>

            <div className=mb-4>
              <label htmlFor=subject className=block mb-2 font-bold>
                {t('contact.subject')}
              </label>
              <input
                type=text
                id=subject
                name=subject
                value={formData.subject}
                onChange={handleChange}
                placeholder=Asunto del mensaje
                className=w-full p-2 bg-gameboy-green-4 border-2 border-gameboy-green-1
              />
            </div>

            <div className=mb-6>
              <label htmlFor=message className=block mb-2 font-bold>
                {t('contact.message')} *
              </label>
              <textarea
                id=message
                name=message
                value={formData.message}
                onChange={handleChange}
                required
                rows={5}
                className=w-full p-2 bg-gameboy-green-4 border-2 border-gameboy-green-1
              ></textarea>
            </div>

            <button
              type=submit
              disabled={isSubmitting}
              className=pixel-button flex items-center gap-2
            >
              {isSubmitting ? t('contact.sending') : (
                <>
                  <Send size={16} />
                  {t('contact.send')}
                </>
              )}
            </button>

            {submitMessage && (
              <p className={}>
                {submitMessage}
              </p>
            )}
          </form>
        </div>
      </div>
    </div>
  );
};

export default Contact;
